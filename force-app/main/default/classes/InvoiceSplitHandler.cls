public class InvoiceSplitHandler {
    
    // For new splits
    public static void handleAfterInsert(List<Invoice_Split__c> newSplits) {
    List<Invoice_History__c> historyToInsert = new List<Invoice_History__c>();
    Set<Id> invoiceIds = new Set<Id>();

    // Collect Invoice IDs to find existing Invoice History records and to query parent Invoice records
    for (Invoice_Split__c split : newSplits) {
        invoiceIds.add(split.Invoice__c);
    }

    // Query for existing Invoice History records to copy values from
    Map<Id, Invoice_History__c> existingHistoriesForCopy = new Map<Id, Invoice_History__c>();
    for (Invoice_History__c history : [SELECT Id, Invoice__c, Amount_Paid__c, Amount_Due__c, Instalment__c, Total__c FROM Invoice_History__c WHERE Invoice__c IN :invoiceIds]) {
        existingHistoriesForCopy.put(history.Invoice__c, history);
    }

    // Query for parent Invoice records to get default values
    Map<Id, Invoice__c> parentInvoices = new Map<Id, Invoice__c>([SELECT Id, Amount_Paid__c, Amount_Due__c, Total__c FROM Invoice__c WHERE Id IN :invoiceIds]);

    for (Invoice_Split__c newSplit : newSplits) {
        Invoice_History__c templateHistory = existingHistoriesForCopy.get(newSplit.Invoice__c);
        Invoice__c parentInvoice = parentInvoices.get(newSplit.Invoice__c);
        if (templateHistory != null) {
            // If an existing history is found, use it as a template
            Invoice_History__c newHistory = new Invoice_History__c(
                Invoice__c = newSplit.Invoice__c,
                InstalmentRecipient__c = newSplit.SplitMember__c,
                SplitPercentage__c = newSplit.SplitPercentage__c,
                Amount_Paid__c = templateHistory.Amount_Paid__c,
                Amount_Due__c = templateHistory.Amount_Due__c,
                Instalment__c = templateHistory.Instalment__c,
                Total__c = templateHistory.Total__c,
                Type__c = 'Earnings'
            );
            historyToInsert.add(newHistory);
        } else if (parentInvoice != null) {
            // If no existing history is found but parent Invoice exists, create a default one using parent Invoice values
            Invoice_History__c newHistory = new Invoice_History__c(
                Invoice__c = newSplit.Invoice__c,
                InstalmentRecipient__c = newSplit.SplitMember__c,
                SplitPercentage__c = newSplit.SplitPercentage__c,
                Amount_Paid__c = parentInvoice.Amount_Paid__c,
                Amount_Due__c = parentInvoice.Amount_Due__c,
                Instalment__c = ((parentInvoice.Total__c != null) && (parentInvoice.Amount_Due__c != null)) ? (parentInvoice.Total__c - parentInvoice.Amount_Due__c) : 0, // Using Amount Paid as the initial Instalment
                Type__c = 'Earnings' // Or another appropriate default value
            );
            historyToInsert.add(newHistory);
        }
        // Consider adding an else block if there's a need to handle cases where neither history nor parent invoice is found
    }

    if (!historyToInsert.isEmpty()) {
        insert historyToInsert;
    }
}

    
    //For updated splits with specific handling for 100% SplitPercentage and updated SplitMember
public static void handleAfterUpdate(Map<Id, Invoice_Split__c> oldSplitMap, Map<Id, Invoice_Split__c> newSplitMap) {
    List<Invoice_History__c> historiesToUpdate = new List<Invoice_History__c>();
    Set<Id> invoiceIds = new Set<Id>();
    
    // Collect Invoice IDs to query existing Invoice History records
    for (Invoice_Split__c newSplit : newSplitMap.values()) {
        invoiceIds.add(newSplit.Invoice__c);
    }
    
    // Query existing Invoice History records
    Map<Id, List<Invoice_History__c>> existingHistoriesByInvoice = new Map<Id, List<Invoice_History__c>>();
    for (Invoice_History__c history : [SELECT Id, Invoice__c, InstalmentRecipient__c, SplitPercentage__c FROM Invoice_History__c WHERE Invoice__c IN :invoiceIds AND Type__c != 'Cross-sell' ORDER BY CreatedDate DESC]) {
        if (!existingHistoriesByInvoice.containsKey(history.Invoice__c)) {
            existingHistoriesByInvoice.put(history.Invoice__c, new List<Invoice_History__c>());
        }
        existingHistoriesByInvoice.get(history.Invoice__c).add(history);
    }
    
    // Determine action based on SplitPercentage and if SplitMember was updated
    for (Invoice_Split__c newSplit : newSplitMap.values()) {
        Invoice_Split__c oldSplit = oldSplitMap.get(newSplit.Id);
        
        // Check if SplitPercentage or SplitMember has changed
        if (newSplit.SplitPercentage__c != oldSplit.SplitPercentage__c || newSplit.SplitMember__c != oldSplit.SplitMember__c) {
            // Special handling for 100% splits and updated SplitMember
            if (newSplit.SplitPercentage__c == 100 && newSplit.SplitMember__c != oldSplit.SplitMember__c) {
                List<Invoice_History__c> historiesForInvoice = existingHistoriesByInvoice.get(newSplit.Invoice__c);
                if (historiesForInvoice != null) {
                    for (Invoice_History__c history : historiesForInvoice) {
                        // Update all related histories for the invoice
                        history.InstalmentRecipient__c = newSplit.SplitMember__c;
                        history.SplitPercentage__c = newSplit.SplitPercentage__c;
                        historiesToUpdate.add(history);
                    }
                }
            } else {
                // Normal handling for other cases
                Invoice_History__c existingHistory = null;
                for (Invoice_History__c history : existingHistoriesByInvoice.get(newSplit.Invoice__c)) {
                    if (history.InstalmentRecipient__c == oldSplit.SplitMember__c) {
                        existingHistory = history;
                        break;
                    }
                }
                
                if (existingHistory != null) {
                    // Update existing history record
                    existingHistory.SplitPercentage__c = newSplit.SplitPercentage__c;
                    existingHistory.InstalmentRecipient__c = newSplit.SplitMember__c; // Update if SplitMember has changed
                    historiesToUpdate.add(existingHistory);
                } else {
                    // Create new history record if not found
                    historiesToUpdate.add(new Invoice_History__c(
                        Invoice__c = newSplit.Invoice__c,
                        InstalmentRecipient__c = newSplit.SplitMember__c,
                        SplitPercentage__c = newSplit.SplitPercentage__c
                    ));
                }
            }
        }
    }
    
    // Update or insert Invoice History records as needed
    if (!historiesToUpdate.isEmpty()) {
        upsert historiesToUpdate;
    }
}

    // For handling deletions
    public static void handleAfterDelete(List<Invoice_Split__c> deletedSplits) {
        List<Invoice_History__c> historiesToDelete = new List<Invoice_History__c>();
        for (Invoice_Split__c deletedSplit : deletedSplits) {
            List<Invoice_History__c> relatedHistories = [SELECT Id FROM Invoice_History__c WHERE InstalmentRecipient__c = :deletedSplit.SplitMember__c];
            historiesToDelete.addAll(relatedHistories);
        }
        if (!historiesToDelete.isEmpty()) {
            delete historiesToDelete;
        }
    }
    
    public static void justIncrement() {
        Integer i = 0;
        // Repeat the increment operation to inflate the line count
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
        i++; 
        i++; 
        i++; 
        i++;
    }
}